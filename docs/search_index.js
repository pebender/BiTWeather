var documenterSearchIndex = {"docs":
[{"location":"index.html#BiTWeather.jl","page":"Introduction","title":"BiTWeather.jl","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"CurrentModule = BiTWeather","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Welcome to the BiTWeather.jl. This documentation strives to provide you with everything you need to know to use and understand BiTWeather.jl. So, the documentation","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Explains how to use the functions (i.e. the API),\nExplains the models implemented by the functions, and\nProvides references for further information about the models.","category":"page"},{"location":"index.html#What-is-BiTWeather.jl","page":"Introduction","title":"What is BiTWeather.jl","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"BiTWeather.jl is a collection of functions that I have been writing to help with our backyard garden. It reads weather data stored in a SQL database and performs calculations we find helpful in planting and maintaining our garden. I implement the functions as we need them for our garden.","category":"page"},{"location":"index.html#Weather-Data","page":"Introduction","title":"Weather Data","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"BiTWeather.jl reads, normalizes and formats weather data from a SQL database table using BiTWeather.read. It uses this normalized and formatted weather data in other functions to perform calculations useful to the backyard gardener. While the output of these calculations is available for many locations, the results are not always sufficient.","category":"page"},{"location":"index.html#Chill-Models","page":"Introduction","title":"Chill Models","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"When deciding on fruit producing plants, we want to know whether or not the plants will set fruit where we live. For many plants, including varieties of fruit trees, varieties of cane berries and strawberries, a major contributing factor to whether or not the plant will set fruit is how much chill the plant receives while dormant. People measure chill in different ways but the goal is the same: estimate whether or not there is enough chill during dormancy to set fruit.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"BiTWeather.jl implements the following chill estimation models:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Cumulative Chill Hour\nCumulative Chill Unit (Utah)\nCumulative Chill Portion (Dynamic)\nMean Temperature","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"While the Cumulative Chill Hour and Cumulative Chill Unit models have proven to be adequate chill estimators for cold climates, the have proven to be less reliable predictors for temperate climate. For temperate climates, the Cumulative Chill Portion Mean Temperature models have proven to be more reliable chill estimators.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"BiTWeather.jl makes the chill models available through its BiTWeather.chill function. In addition, the results can be plotted using its BiTWeather.chillPlot function.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Last Reviewed on 07 February 2021","category":"page"},{"location":"chill_MeanTemperature.html#Mean-Temperature","page":"Mean Temperature","title":"Mean Temperature","text":"","category":"section"},{"location":"chill_MeanTemperature.html#Model-Overview","page":"Mean Temperature","title":"Model Overview","text":"","category":"section"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"The Mean Temperature model is explained in Chilling Accumulation: its Importance and Estimation. The model was developed for use in temperate climates by people who do not have access to hourly temperature measurements but do have have access to the temperature measurements from a max/min thermometer (also known as a high/low thermometer).","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"The model maps the mean temperature over the coldest month of the year to the total number of chill units using a relationship based on measured data. The mean temperature is calculated by averaging the mean of the maximum temperatures and mean minimum temperatures.","category":"page"},{"location":"chill_MeanTemperature.html#Max/Min-Thermometer-Emulation","page":"Mean Temperature","title":"Max/Min Thermometer Emulation","text":"","category":"section"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"To emulate a max/min thermometer, BiTWeather.chill calculates the daily maximum x_max(d) = Theta_max(d) and minimum x_min(d) = Theta_min(d) temperatures from the weather data's temperature measurements using","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"\nx_max(d) = Theta_max(d)\n=\nmax_n in d Theta_n(d)\n","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"\nx_min(d) = Theta_min(d)\n=\nmin_n in d Theta_n(d)\n","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"where Theta_n(d) is the temperature in degree C of measurement n on day d. After that, BiTWeather.chill applies the Mean Temperature model.","category":"page"},{"location":"chill_MeanTemperature.html#Model-Implementation","page":"Mean Temperature","title":"Model Implementation","text":"","category":"section"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"First, BiTWeather.chill calculates the mean maximum temperature x_max = overlineTheta_max and the mean minimum temperature x_min = overlineTheta_min using","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"\nx_max =\nfrac1d_2 - d_1 + 1\ncdot\nsum_d=d_1^d_2\nx_max(d)\n=\noverlineTheta_max =\nfrac1d_2 - d_1 + 1\ncdot\nsum_d=d_1^d_2\nTheta_max(d)\n","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"\nx_min =\nfrac1d_2 - d_1 + 1\ncdot\nsum_d=d_1^d_2\nx_min(d)\n=\noverlineTheta_min =\nfrac1d_2 - d_1 + 1\ncdot\nsum_d=d_1^d_2\nTheta_min(d)\n","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"where d_1 is the first day of the calculation period and d_2 is the last day of the calculation period. After that, it calculates the mean temperature x = overlineTheta using","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"\nx =\nfracx_max + x_min2\n=\n overlineTheta\n=\nfrac\n    overlineTheta_max\n    +\n    overlineTheta_min\n2\n","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"The data in Figure 1 of Chilling Accumulation: its Importance and Estimation shows the mapping from mean temperature to total chill units. This mapping can be closely approximated by the linear equation","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"\ny = m cdot x + b\n","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"where","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"\nx_0 = frac5 degree C9 degree F cdot\n(62 degree F - 32 degree F) = frac503 degree C\nspacespace\ny_0 = 200space textchill units\n","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"\nx_1 = frac5 degree C9 degree F cdot (44 degree F - 32 degree F) = frac203 degree C\nspacespace\ny_1 = 1200space textchill units\n","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"\nm = fracy_1 - y_0x_1 - x_0 = -100 space fractextchill unitsdegree C\nspacespace\nb = - m * x_0 + y_0 = frac56003 space textchill units\n","category":"page"},{"location":"chill_MeanTemperature.html#Software-Name-Mappings","page":"Mean Temperature","title":"Software Name Mappings","text":"","category":"section"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"Because of naming restrictions imposed by the Julia language and Julia coding style, I cannot use the parameter, variable and function names from this summary for the parameter, variable and function names in the program. So, I have mapped names in the summary to names in the program while attempting to keep them consistent.","category":"page"},{"location":"chill_MeanTemperature.html#Parameter-Name-Mappings","page":"Mean Temperature","title":"Parameter Name Mappings","text":"","category":"section"},{"location":"chill_MeanTemperature.html#Variable-Name-Mappings","page":"Mean Temperature","title":"Variable Name Mappings","text":"","category":"section"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"Theta_n Rightarrow temperature","category":"page"},{"location":"chill_MeanTemperature.html#Equation-Name-Mappings","page":"Mean Temperature","title":"Equation Name Mappings","text":"","category":"section"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"x_max(d) Rightarrow x_max_d\nx_min(d) Rightarrow x_min_d\nx_max Rightarrow x_max\nx_min Rightarrow x_min\nx Rightarrow x\ny Rightarrow y","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"","category":"page"},{"location":"chill_MeanTemperature.html","page":"Mean Temperature","title":"Mean Temperature","text":"Last Reviewed on 06 February 2021","category":"page"},{"location":"api_functions.html#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"api_functions.html","page":"Functions","title":"Functions","text":"CurrentModule = BiTWeather","category":"page"},{"location":"api_functions.html","page":"Functions","title":"Functions","text":"read\nchill\nchillPlot","category":"page"},{"location":"api_functions.html#BiTWeather.read","page":"Functions","title":"BiTWeather.read","text":"    read(configuration::Configuration,\n         range::Union{Tuple{Union{Date, Nothing}, Union{Date, Nothing}}, Nothing},\n         fields::Union{Vector{Symbol}, Nothing})::DataFrame\n\nArguments\n\nconfiguration::BiTWeather.Configuration: A BiTWeather.Configuration   providing the location and structure of the weather data.\nrange::Union{Tuple{Union{Dates.Date, Nothing}, Union{Dates.Date, Nothing}}, Nothing}:   The date range of the records to retrieve. A value of nothing for the   lower, upper or both date bounds means there is no lower, upper or any   date limit respectively. By selecting a date range here, you   can do things such limit the records to the dates you need for your   downstream processing.\nfields::Union{Vector{Symbol}, Nothing}: The fields to include from each   record. A value of nothing means all fields included in   configure.fieldMappings will be included. The :dateTime field will   be included reguardless of the value of fields. By providing a list   of fields here, you can limit the records to the fields you need for   your downstream processing.\n\nReturn\n\nA DataFrames.DataFrame containing the requested weather data in SI units   stored as Float64 and indexed by year/month/day/hour/minute/second.\n\nFetches and returns the weather data described by configuration. It assumes the Julia environment is configured so configure.dsn is a DSN that is able to connect to the SQL database containing the weather data and read the table configure.table. It renames the configure.table fields using the configure.fieldMappings. It parses the :dateTime field into separate columns of integers containing the year, month, day, hour, minute and second. All other fields are converted to SI units equivalents and stored as Float64 values. It drops any records with missing field values.\n\nExample\n\n    import DataFrames\n    import BiTWeather\n\n    configuration = BiTWeather.Configuration(\n        dsn = \"meteobridge\",\n        table = \"backinthirty\",\n        fieldMappings = Dict(\n            :dateTime => BiTWeather.FieldMapping(\n                name = \"DateTime\"\n            ),\n            :temperature => BiTWeather.FieldMapping(\n                name = \"TempOutNow\",\n                units = \"F\"\n            )\n        )\n    )\n\n    weatherData::DataFrames.DataFrame = BiTWeather.read(configuration, nothing, nothing)\n\n\n\n\n\n","category":"function"},{"location":"api_functions.html#BiTWeather.chill","page":"Functions","title":"BiTWeather.chill","text":"    chill(::Val{:CumulativeChillHour}, weatherData::DataFrame)::DataFrame\n\nImplements the Cumulative Chill Hour model.\n\nArguments\n\nweatherData::DataFrames.DataFrame: The weather data used for calculating   the accumulated chill hours. weatherData must be formatted to match the   output of BiTWeather.read and contain at least the :temperature`   field.\n\nReturn\n\nA DataFrames.DataFrame containing the chill hours indexed by   year/month/day/hour. The returned columns are: year, month, day, hour,   temperature, Delta y(n), and y(n).\n\nExample\n\n    import DataFrames\n    import Dates\n    import BiTWeather\n\n    configuration = BiTWeather.Configuration(\n        dsn = \"meteobridge\",\n        table = \"backinthirty\",\n        fieldMappings = Dict(\n            :dateTime => BiTWeather.FieldMapping(\n                name = \"DateTime\"\n            ),\n            :temperature => BiTWeather.FieldMapping(\n                name = \"TempOutNow\",\n                units = \"F\"\n            )\n        )\n    )\n\n    year::Int = 2021\n    rangeStart::Dates.Date = Dates.Date(year - 1, 11, 1)\n    rangeEnd::Dates.Date = Dates.Date(year, 2, 28)\n    range::Tuple{Float64, Float64} = (rangeStart, rangeEnd)\n    fields::Vector{Symbol} = [:temperature]\n    weatherData::DataFrames.DataFrame = BiTWeather.read(configuration, range, fields)\n    chillData::DataFrames.DataFrame = BiTWeather.chill(Val(:CumulativeChillHour), weatherData)\n    println(chillData)\n\n\n\n\n\n    chill(::Val{:CumulativeChillUnit}, weatherData::DataFrame)::DataFrame\n\nImplements the Cumulative Chill Unit model (also known as the Utah model).\n\nArguments\n\nweatherData::DataFrames.DataFrame: The weather data used for calculating   the cumulative chill units. weatherData must be formatted to match the   output of BiTWeather.read and contain at least the :temperature   field.\n\nReturn\n\nA DataFrames.DataFrame containing the chill units indexed by   year/month/day/hour. The returned columns are: year, month, temperature,   Delta y(n), and y(n).\n\nExample\n\n    import DataFrames\n    import Dates\n    import BiTWeather\n\n    configuration = BiTWeather.Configuration(\n        dsn = \"meteobridge\",\n        table = \"backinthirty\",\n        fieldMappings = Dict(\n            :dateTime => BiTWeather.FieldMapping(\n                name = \"DateTime\"\n            ),\n            :temperature => BiTWeather.FieldMapping(\n                name = \"TempOutNow\",\n                units = \"F\"\n            )\n        )\n    )\n\n    year::Int = 2021\n    rangeStart::Dates.Date = Dates.Date(year - 1, 11, 1)\n    rangeEnd::Dates.Date = Dates.Date(year, 2, 28)\n    range::Tuple{Float64, Float64} = (rangeStart, rangeEnd)\n    fields::Vector{Symbol} = [:temperature]\n    weatherData::DataFrames.DataFrame = BiTWeather.read(configuration, range, fields)\n    chillData::DataFrames.DataFrame = BiTWeather.chill(Val(:CumulativeChillUnit), weatherData)\n    println(chillData)\n\n\n\n\n\n    chill(::Val{:CumulativeChillPortion}, weatherData::DataFrame)::DataFrame\n\nImplements the Cumulative Chill Portion model (also known as the Dynamic model).\n\nArguments\n\nweatherData::DataFrames.DataFrame: The weather data used for calculating   the accumulated chill portions. weatherData must be formatted to match the   output of BiTWeather.read and contain at least the:temperature   field.\n\nReturn\n\nA DataFrames.DataFrame containing the chill portions indexed by   year/month/day/hour. The returned columns are:  year, month, day, hour,   temperature, x(n), Delta y(n), and y(n).\n\nExample\n\n    import DataFrames\n    import Dates\n    import BiTWeather\n\n    configuration = BiTWeather.Configuration(\n        dsn = \"meteobridge\",\n        table = \"backinthirty\",\n        fieldMappings = Dict(\n            :dateTime => BiTWeather.FieldMapping(\n                name = \"DateTime\"\n            ),\n            :temperature => BiTWeather.FieldMapping(\n                name = \"TempOutNow\",\n                units = \"F\"\n            )\n        )\n    )\n\n    year::Int = 2021\n    rangeStart::Dates.Date = Dates.Date(year - 1, 9, 1)\n    rangeEnd::Dates.Date = Dates.Date(year, 2, 28)\n    range::Tuple{Float64, Float64} = (rangeStart, rangeEnd)\n    fields::Vector{Symbol} = [:temperature]\n    weatherData::DataFrames.DataFrame = BiTWeather.read(configuration, range, fields)\n    chillData::DataFrames.DataFrame = BiTWeather.chill(Val(:CumulativeChillPortion), weatherData)\n    println(chillData)\n\n\n\n\n\n    chill(::Val{:MeanTemperature}, weatherData::DataFrame)::DataFrame\n\nImplements the Mean Temperature model.\n\nArguments\n\nweatherData: A DataFrames.DataFrame containing the weather data used for   estimating the chill units. weatherData must be formatted to match the   output of BiTWeather.read and contain at least the :temperature field.\n\nReturn\n\nA DataFrames.DataFrame containing the chill units indexed by   year/month/day/hour. The returned columns are: x and y.\n\nFor temperate climates, you want to use data from the coldest month of the year for the calculation. Whereas, for cold climates, you want to use data from the coldest two months of the year.\n\nExample\n\n    import DataFrames\n    import Dates\n    import BiTWeather\n\n    configuration = BiTWeather.Configuration(\n        dsn = \"meteobridge\",\n        table = \"backinthirty\",\n        fieldMappings = Dict(\n            :dateTime => BiTWeather.FieldMapping(\n                name = \"DateTime\"\n            ),\n            :temperature => BiTWeather.FieldMapping(\n                name = \"TempOutNow\",\n                units = \"F\"\n            )\n        )\n    )\n\n    year::Int = 2021\n    rangeStart::Dates.Date = Dates.Date(year, 1, 1)\n    rangeEnd::Dates.Date = Dates.Date(year, 1, 31)\n    range::Tuple{Float64, Float64} = (rangeStart, rangeEnd)\n    fields::Vector{Symbol} = [:temperature]\n    weatherData::DataFrames.DataFrame = BiTWeather.read(configuration, range, fields)\n    chillData::DataFrames.DataFrame = BiTWeather.chill(Val(:MeanTemperature), weatherData)\n    println(chillData)\n\n\n\n\n\n","category":"function"},{"location":"api_functions.html#BiTWeather.chillPlot","page":"Functions","title":"BiTWeather.chillPlot","text":"    chillPlot(::Val{:CumulativeChillPortion}, chillData::DataFrame)::PlotlyJS.Plot\n\nGenerates a plot of the Cumulative Chill Portion data.\n\nArguments\n\nchillData::DataFrames.DataFrame: The chill data used in generating the plot.   chillData must be formated to match the output of   BiTWeather.chill called with Val(:CumulativeChillPortion).\n\nReturn\n\nA PlotlyJS.Plot containing a plot of the temperature and chill portion data.\n\nExample\n\n    import DataFrames\n    import Dates\n    import PlotlyJS\n    import BiTWeather\n\n    configuration = BiTWeather.Configuration(\n        dsn = \"meteobridge\",\n        table = \"backinthirty\",\n        fieldMappings = Dict(\n            :dateTime => BiTWeather.FieldMapping(\n                name = \"DateTime\"\n            ),\n            :temperature => BiTWeather.FieldMapping(\n                name = \"TempOutNow\",\n                units = \"F\"\n            )\n        )\n    )\n\n    year::Int = 2021\n    rangeStart::Dates.Date = Dates.Date(year - 1, 9, 1)\n    rangeEnd::Dates.Date = Dates.Date(year, 2, 28)\n    range::Tuple{Float64, Float64} = (rangeStart, rangeEnd)\n    fields::Vector{Symbol} = [:temperature]\n    weatherData = BiTWeather.read(configuration, range, fields)\n    chillData = BiTWeather.chill(Val(:CumulativeChillPortion), weatherData)\n    plot::PlotlyJS.Plot = BiTWeather.chillPlot(Val(:CumulativeChillPortion), chillData)\n    PlotlyJS.display(plot)\n\n\n\n\n\n    chillPlot(::Val{:CumulativeChillHour}, chillData::DataFrame)::PlotlyJS.Plot\n\nGenerates a plot of the Cumulative Chill Hour model data.\n\nArguments\n\nchillData::DataFrames.DataFrame: The chill data used in generating the plot.   chillData must be formated to match the output of   BiTWeather.chill called with Val(:CumulativeChillHour).\n\nReturn\n\nA PlotlyJS.Plot containing a plot of the temperature and chill portion data.\n\nExample\n\n    import DataFrames\n    import Dates\n    import PlotlyJS\n    import BiTWeather\n\n    configuration = BiTWeather.Configuration(\n        dsn = \"meteobridge\",\n        table = \"backinthirty\",\n        fieldMappings = Dict(\n            :dateTime => BiTWeather.FieldMapping(\n                name = \"DateTime\"\n            ),\n            :temperature => BiTWeather.FieldMapping(\n                name = \"TempOutNow\",\n                units = \"F\"\n            )\n        )\n    )\n\n    year::Int = 2021\n    rangeStart::Dates.Date = Dates.Date(year - 1, 11, 1)\n    rangeEnd::Dates.Date = Dates.Date(year, 2, 28)\n    range::Tuple{Float64, Float64} = (rangeStart, rangeEnd)\n    fields::Vector{Symbol} = [:temperature]\n    weatherData = BiTWeather.read(configuration, range, fields)\n    chillData = BiTWeather.chill(Val(:CumulativeChillHour), weatherData)\n    plot::PlotlyJS.Plot = BiTWeather.chillPlot(Val(:CumulativeChillHour), chillData)\n    PlotlyJS.display(plot)\n\n\n\n\n\n    chillPlot(::Val{:CumulativeChillUnit}, chillData::DataFrame)::PlotlyJS.Plot\n\nGenerates a plot of the Cumulative Chill Unit model data.\n\nArguments\n\nchillData::DataFrames.DataFrame: The chill data used in generating the plot.   chillData must be formated to match the output of   BiTWeather.chill called with Val(:CumulativeChillUnit).\n\nReturn\n\nA PlotlyJS.Plot containing a plot of the temperature and chill portion data.\n\nExample\n\n    import DataFrames\n    import Dates\n    import PlotlyJS\n    import BiTWeather\n\n    configuration = BiTWeather.Configuration(\n        dsn = \"meteobridge\",\n        table = \"backinthirty\",\n        fieldMappings = Dict(\n            :dateTime => BiTWeather.FieldMapping(\n                name = \"DateTime\"\n            ),\n            :temperature => BiTWeather.FieldMapping(\n                name = \"TempOutNow\",\n                units = \"F\"\n            )\n        )\n    )\n\n    year::Int = 2021\n    rangeStart::Dates.Date = Dates.Date(year - 1, 11, 1)\n    rangeEnd::Dates.Date = Dates.Date(year, 2, 28)\n    range::Tuple{Float64, Float64} = (rangeStart, rangeEnd)\n    fields::Vector{Symbol} = [:temperature]\n    weatherData = BiTWeather.read(configuration, range, fields)\n    chillData = BiTWeather.chill(Val(:CumulativeChillUnit), weatherData)\n    plot::PlotlyJS.Plot = BiTWeather.chillPlot(Val(:CumulativeChillUnit), chillData)\n    PlotlyJS.display(plot)\n\n\n\n\n\n    chillPlot(::Val{:MeanTemperature}, chillData::DataFrame)::PlotlyJS.Plot\n\nGenerates a plot of the Cumulative Chill Unit model data.\n\nArguments\n\nchillData::DataFrames.DataFrame: The chill data used in generating the plot.   chillData must be formated to match the output of   BiTWeather.chill called with Val(:MeanTemperature).\n\nReturn\n\nA PlotlyJS.Plot containing a plot of the temperature and chill portion data.\n\nExample\n\n    import DataFrames\n    import Dates\n    import PlotlyJS\n    import BiTWeather\n\n    configuration = BiTWeather.Configuration(\n        dsn = \"meteobridge\",\n        table = \"backinthirty\",\n        fieldMappings = Dict(\n            :dateTime => BiTWeather.FieldMapping(\n                name = \"DateTime\"\n            ),\n            :temperature => BiTWeather.FieldMapping(\n                name = \"TempOutNow\",\n                units = \"F\"\n            )\n        )\n    )\n\n    year::Int = 2021\n    rangeStart::Dates.Date = Dates.Date(year, 1, 1)\n    rangeEnd::Dates.Date = Dates.Date(year, 1, 31)\n    range::Tuple{Float64, Float64} = (rangeStart, rangeEnd)\n    fields::Vector{Symbol} = [:temperature]\n    weatherData = BiTWeather.read(configuration, range, fields)\n    chillData = BiTWeather.chill(Val(:MeanTemperature), weatherData)\n    plot::PlotlyJS.Plot = BiTWeather.chillPlot(Val(:MeanTemperature), chillData)\n    PlotlyJS.display(plot)\n\n\n\n\n\n","category":"function"},{"location":"api_functions.html","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"api_functions.html","page":"Functions","title":"Functions","text":"Last Reviewed on 07 February 2021","category":"page"},{"location":"background.html#Background","page":"Background","title":"Background","text":"","category":"section"},{"location":"background.html#Why-the-Name?","page":"Background","title":"Why the Name?","text":"","category":"section"},{"location":"background.html","page":"Background","title":"Background","text":"Since the module is a collection of weather related functions, I felt Weather.jl would be a good name for the module. However, the name Weather.jl is very generic and I did not want the name of my module to conflict with the name of someone else's weather module. So, I decided to call it BiTWeather.jl instead.","category":"page"},{"location":"background.html","page":"Background","title":"Background","text":"BiT is an acronym for \"Back in Thirty\". \"Back in Thirty\" is the name of our house, garden and internet domain. So, I felt prefacing the Weather.jl with BiT to form BiTWeather.jl was a good way to keep the module name unique while not completely obscuring its function.","category":"page"},{"location":"background.html#Our-Equipment","page":"Background","title":"Our Equipment","text":"","category":"section"},{"location":"background.html","page":"Background","title":"Background","text":"We have a permaculture garden. We use several pieces of equipment in conjunction with the garden. Most of the equipment helps in collecting an analyzing weather data. The other equipment helps in managing water usage.","category":"page"},{"location":"background.html","page":"Background","title":"Background","text":"We collect weather data using an Ambient Weather WS-1550-IP personal weather station.\nWe transfer weather data to a SQL database using a Meteobridge rebranded as the Ambient Weather WEATHERBRIDGE.\nWe store weather data in a MariaDB running on a Synology DS718+.\nWe upload weather data to PWSWeather as BACKINTHRITY to enable our smart irrigation controllers to access the weather data.\nWe control irrigation using Orbit b-hyve smart irrigation controllers.\nWe monitor water usage using a Flume Smart Home Water Monitor.","category":"page"},{"location":"background.html","page":"Background","title":"Background","text":"Yes, this equipment is overkill. However, I have at least some justification for these toys.","category":"page"},{"location":"background.html#Our-Climate","page":"Background","title":"Our Climate","text":"","category":"section"},{"location":"background.html","page":"Background","title":"Background","text":"We live in San Diego.","category":"page"},{"location":"background.html","page":"Background","title":"Background","text":"San Diego's proximity to the ocean, the desert and the mountains results in four distinct climate regions: costal, inland, mountain and desert. However, because of local topography, there are many microclimates within these climate regions. My grandfather, father and I all live(d) in San Diego. Yet the plants and trees that are successful where each of us live(d) differ. So, in order to determine the plants with the best chance of success where I live, I need to know my specific weather. So, I collect my own weather data.","category":"page"},{"location":"background.html","page":"Background","title":"Background","text":"It seems San Diego is either in a drought or just about to enter a drought most of the time. So, it is important to both minimize our water usage[1]. So, I use weather data assisted irrigation and monitor how we are using water.","category":"page"},{"location":"background.html","page":"Background","title":"Background","text":"","category":"page"},{"location":"background.html","page":"Background","title":"Background","text":"Last Reviewed on 06 February 2021","category":"page"},{"location":"background.html","page":"Background","title":"Background","text":"[1]: In addition to reducing water usage, people in California should make sure their property absorbs the water from rainfall rather then directing it down the storm drains. While this can reduce their own water usage, the bigger benefit is that the rainwater ends up in the water table rather than the ocean.","category":"page"},{"location":"chill_CumulativeChillPortion.html#Cumulative-Chill-Portion-(Dynamic)","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"","category":"section"},{"location":"chill_CumulativeChillPortion.html#Model-Overview","page":"Cumulative Chill Portion (Dynamic)","title":"Model Overview","text":"","category":"section"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"The Cumulative Chill Portion model (also known as the Dynamic model) is a two step model that follows the equations below. The mathematical analysis and computer simulations can be found in the two papers","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"\"The temperature dependence of dormancy breaking in plants: Mathematical analysis of a two-step model involving a cooperative transition\" (refered to as the \"mathematical analysis\" paper)\n\"The temperature dependence of dormancy breaking in plants: Computer simulation of processes studied under controlled temperatures\" (refered to as the \"computer simulation\" paper)","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"I have provided a summary of the papers so people do not need to track down and read the papers in order to understand the model. Hopefully, my summary is sufficient to accomplish that goal.","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"As mentioned, the model presented and analyzed in \"mathematical analysis\" paper is a two step model. It assumes there is a Dormancy Breaking Factor that is created and destroyed. It assumes the creation and destruction processes of this DBF each obey the Arrhenius equation. Further, it assumes that after enough Dormancy Breaking Factor from the creation and destruction processes has accumulated, the accumulated amount is no longer reversible. The first step is the reversible creation and destruction of the DBF (refered to a Precurser of DBF (PDBF)). The second step is the transfer of the currently accumulated PDBF to the irreversible DBF (refered to as DBF).","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"The \"computer simulation\" paper introduces a refinement to the model to better reflect measured behavior. Instead of the transfer from PDBF to DBF being deterministic, the transfer is made probabilistic.","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"Through the Arrhenius equations used for PDBF creation and destruction, the model relies on the hidden parameters for the creation equations' activation energy and rate as well a the destruction equation's activation energy and rate. Thankfully, we can determine these hidden parameters from a observable parameters predicted by the model.","category":"page"},{"location":"chill_CumulativeChillPortion.html#Model-Parameters","page":"Cumulative Chill Portion (Dynamic)","title":"Model Parameters","text":"","category":"section"},{"location":"chill_CumulativeChillPortion.html#Observable-Parameters","page":"Cumulative Chill Portion (Dynamic)","title":"Observable Parameters","text":"","category":"section"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"The model predicts there is an optimum temperature at which chill accumulates most quickly. This is not unexpected. Previously observation derived models have been moving in this direction. First, the developers of the Cumulative Chill Hour model observed there is a temperature above which there is no significant chill accumulation. Then they observed there is a temperature below which there is no significant chill accumulation. Later, the developers of the Cumulative Chill Unit model observed that chill accumulates less quickly when the temperature is near the edge of lower and upper temperature thresholds and more quickly when it is in the middle of the temperature range. We will call this optimum temperature Theta^* and time between transfer of PDBF to DBF at this optimum temperature tau^*.","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"The model predicts there is a critical temperature above which no chill accumulates. This is not unexpected. The developers of both the Cumulative Chill Hour and Cumulative Chill Unit models observed this behavior. We will call this temperature Theta_c","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"The model predicts that when the temperature cycles between temperatures that are above and below the optimum temperature, chill can accumulate more quickly than at the optimum temperature. This is unexpected. People developing chill models had not observed this behavior until after it was predicted by the math. However, this lack of prior observation is not unexpected. It can be difficult to recognize short term dynamics of a system, especially what the short term dynamics are counterintuitive. We will call the higher temperature Theta_1, the lower temperature Theta_2, the period of the cycle pi_c and the relative time spent at the higher and lower temperatures eta.","category":"page"},{"location":"chill_CumulativeChillPortion.html#Hidden-Parameters","page":"Cumulative Chill Portion (Dynamic)","title":"Hidden Parameters","text":"","category":"section"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"Because of the creation and destruction of PDBF are each modeled an Arrhenius equation, the model needs the four hidden parameters creation activation energy E_0, the creation rate A_0, the destruction activation E_1 and destruction rate A_1. We can derive these hidden parameters from the observable parameters using @eq:A1 A1, A2, A3 and A4 from the \"computer simulation\" paper. I included these for equations in the Appendix in case anyone needs to determine the hidden parameters for their own set of observable parameters.","category":"page"},{"location":"chill_CumulativeChillPortion.html#Parameter-Values","page":"Cumulative Chill Portion (Dynamic)","title":"Parameter Values","text":"","category":"section"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"For my implementation, I chose the first set of observable parameters from Table 1 in the \"computer simulation\" paper. I chose these parameters because these were the parameters used by paper's sample implementation and by many subsequent implementations of the model. These observable parameter values are","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"\nTheta^* = 281 space textK\nspacespace\nTheta_c = 287 space textK\nspacespace\nTheta_1 = 297 space textK\nspacespace\nTheta_2 = 279 space textK\n","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"\ntau^* = 30 space texth spacespace\npi_c = 24 space texth spacespace\neta = frac13\n","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"They yield the hidden parameter values","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"\nE_0 = 41535cdot 10^3 space textK space  space\nE_1 = 128888 cdot 10^4space textK\n\n\nA_0 = 1395 cdot 10^5 space space\nA_1 = 2567 cdot 10^18\n","category":"page"},{"location":"chill_CumulativeChillPortion.html#Model-Implementation","page":"Cumulative Chill Portion (Dynamic)","title":"Model Implementation","text":"","category":"section"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"The computer simulation uses a discrete implementation. We use a discrete implementation because there is no closed form solution for the continuous model.","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"The discrete implementation holds the temperature constant for a time interval n. After updating the equations using this temperature, the implementation uses the updated values as the initial values for the next time interval n + 1 and repeats the process.","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"For this discrete implementation, PDBF is given by","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"x(n) = x_s(n) - (x_s(n) - x_0(n)) cdot e^-k_1(n)\n","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"where","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"tag*12\n\nx_s(n) = frack_0(n)k_1(n)\n","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"and","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"\nk_0(n) = A_0 cdot e^- fracE_0Theta_n\nspacespace\nk_1(n) = A_1 cdot e^- fracE_1Theta_n\n","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"x(n) is the PDBF after the time interval n but before any transfer of PDBF to DBF. x_0(n) is the PDBF at the end of the previous time interval after any transfer of PDBF to DBF. x_s(n) is the steady state value of x(n) were the temperature constant for all values of n. k_0(n) and k_1(n) are the rates of PDBF creation and destruction during the time interval, and Theta_n is the temperature during the time interval.","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"When x(n) = 1, there is a probability that the PDBF will transfer to DBF. This probability is given by the sigmoidal function","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"p(n) =\nfrac\n\n    e^\n        4 cdot Theta_f^2 cdot F\n        cdot\n        (frac1Theta_f - frac1Theta_n)\n    \n\n\n    1\n    +\n    e^\n        4 cdot Theta_f^2 cdot F\n        cdot\n        (frac1Theta_f - frac1Theta_n)\n    \n\n=\nfrac\ne^4 cdot F cdot Theta_f cdot (1 - Theta_f  Theta_n)\n1 + e^4 cdot F cdot Theta_f cdot (1 - Theta_f  Theta_n)\n","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"where","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"\nTheta_f = 277 space textK\nspacespace\nF = 04 space K^-1\n","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"where Theta_f is the transition temperature and F is the slope at the transition temperature. Theta_f and F are chosen based on observation.","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"Rather than flip a coin with bias p(n) each time x(n) = 1, we transfer p(n) amount of x(n) to y(n) each time x(n) = 1. While not correct for any giving instance of x(n) = 1, it is approximately correct after many occurrences of the same value of Theta_n and has the advantage of making the x(n) and y(n) deterministic for a given sequence of Theta_n.","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"Under these assumptions, the transfer of PDBF to DBF is given by Delta y(n), DPF is given by y(n) and the initial PDBF for the next time interval is given by x_0(n + 1). At the start of the simulation, x_0(n) and y(n) with zero.","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"\nDelta y(n) =\nbegincases\n    0\n     textif  x(n)  1 \n    P(n) cdot x(n)\n     textif x(n) geq 1\nendcases\n\n\ny(n) = y(n - 1) + Delta y(n)\n\n\nx_0(n + 1) = x(n) - Delta y(n)\n","category":"page"},{"location":"chill_CumulativeChillPortion.html#Software-Name-Mappings","page":"Cumulative Chill Portion (Dynamic)","title":"Software Name Mappings","text":"","category":"section"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"Because of naming restrictions imposed by the Julia language and Julia coding style, I cannot use the parameter, variable and function names from this summary for the parameter, variable and function names in the program. So, I have mapped names in the summary to names in the program while attempting to keep them consistent.","category":"page"},{"location":"chill_CumulativeChillPortion.html#Parameter-Name-Mappings","page":"Cumulative Chill Portion (Dynamic)","title":"Parameter Name Mappings","text":"","category":"section"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"E_0 Rightarrow e_0\nE_1 Rightarrow e_1\nA_0 Rightarrow a_0\nA_1 Rightarrow a_1\nTheta_f Rightarrow theta_f\nF Rightarrow f","category":"page"},{"location":"chill_CumulativeChillPortion.html#Variable-Name-Mappings","page":"Cumulative Chill Portion (Dynamic)","title":"Variable Name Mappings","text":"","category":"section"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"Theta_n Rightarrow theta_n","category":"page"},{"location":"chill_CumulativeChillPortion.html#Equation-Name-Mappings","page":"Cumulative Chill Portion (Dynamic)","title":"Equation Name Mappings","text":"","category":"section"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"k_0(n) Rightarrow k_0_n\nk_1(n) Rightarrow k_1_n\nx_s(n) Rightarrow x_s_n\nx(n) Rightarrow x_n\np(n) Rightarrow p_n\nDelta y(n) Rightarrow delta_y_n\ny(n) Rightarrow y_n\ny(n - 1) Rightarrow y_nMinus1\nx_0(n) Rightarrow x_0_n\nx_0(n + 1) Rightarrow x_0_nPlus1","category":"page"},{"location":"chill_CumulativeChillPortion.html#Appendix","page":"Cumulative Chill Portion (Dynamic)","title":"Appendix","text":"","category":"section"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"For reference, I have included the equations A1, A2, A3 and A4 from the \"computer simulation\" paper.","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"tag*A1\n\nE_1\n=\nfrac\nE_0 - E_1\n\n    (e^(E_1 - E_0) cdot q - 1)\n    cdot\n    ln(1 - e^(E_0 - E_1) cdot q)\n\n","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"tag*A2\n\nk_1(Theta^*) =\n- frac\n\n    ln(1 - e^(E_0 - E_1) cdot q)\n\n\n    tau(Theta^*)\n\n","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"tag*A3\n\nA_0\n= A_1 cdot e^(E_0 - E_1)  Theta_c\n","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"tag*A4\n\nfrac\n\n    e^(E_1 - E_0)  Theta_c -\n    e^(E_1 - E_0)  Theta_1\n\n\n    e^(E_1 - E_0)  Theta_2 -\n    e^(E_1 - E_0)  Theta_1\n\n=\nfrac\n\n    1 -\n    e^\n        - k_1(Theta_2) cdot\n        (1 - eta) cdot\n        pi_c\n    \n\n\n    1 -\n    e^\n        - (\n            k_1(Theta_1) cdot eta +\n            k_1(Theta_2) cdot (1 - eta)\n        ) cdot pi_c\n    \n\n","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"where","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"\nq = frac1Theta^* - frac1Theta_c\n","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"","category":"page"},{"location":"chill_CumulativeChillPortion.html","page":"Cumulative Chill Portion (Dynamic)","title":"Cumulative Chill Portion (Dynamic)","text":"Last Reviewed on 06 February 2021","category":"page"},{"location":"chill_CumulativeChillUnit.html#Cumulative-Chill-Unit-(Utah)","page":"Cumulative Chill Unit (Utah)","title":"Cumulative Chill Unit (Utah)","text":"","category":"section"},{"location":"chill_CumulativeChillUnit.html#Model-Overview","page":"Cumulative Chill Unit (Utah)","title":"Model Overview","text":"","category":"section"},{"location":"chill_CumulativeChillUnit.html","page":"Cumulative Chill Unit (Utah)","title":"Cumulative Chill Unit (Utah)","text":"The Cumulative Chill Unit model (also known as the Utah model) can be seen as a refinement of the Cumulative Chill Hour model. The Cumulative Chill Hour model accumulates a fixed amount of chill for every hour the temperature is in a temperature range defined by fixed upper and lower temperatures. In contrast, the Cumulative Chill Unit model has several different temperature thresholds, and the chill accumulated depends into which temperature range the current temperature falls. In addition, in certain temperature ranges the accumulated chill is actually reduced.","category":"page"},{"location":"chill_CumulativeChillUnit.html#Model-Implementation","page":"Cumulative Chill Unit (Utah)","title":"Model Implementation","text":"","category":"section"},{"location":"chill_CumulativeChillUnit.html","page":"Cumulative Chill Unit (Utah)","title":"Cumulative Chill Unit (Utah)","text":"\nDelta y(n) =\nbegincases\n    +00\n       space textfor  space Theta_n leq 340 degree F \n    +05\n       space textfor  space 340 degree F  Theta_n leq 360 degree F \n    +10\n       space textfor  space 360 degree F  Theta_n leq 480 degree F \n    +05\n       space textfor  space 480 degree F  Theta_n leq 540 degree F \n    +00\n       space textfor  space 540 degree F  Theta_n leq 600 degree F \n    -05\n       space textfor  space 600 degree F  Theta_n leq 650 degree F \n    -10\n       space textfor  space Theta_n  650 degree F\nendcases\n","category":"page"},{"location":"chill_CumulativeChillUnit.html","page":"Cumulative Chill Unit (Utah)","title":"Cumulative Chill Unit (Utah)","text":"and","category":"page"},{"location":"chill_CumulativeChillUnit.html","page":"Cumulative Chill Unit (Utah)","title":"Cumulative Chill Unit (Utah)","text":"\ny(n) = y(n - 1) + Delta y(n)\n","category":"page"},{"location":"chill_CumulativeChillUnit.html","page":"Cumulative Chill Unit (Utah)","title":"Cumulative Chill Unit (Utah)","text":"where Theta_n is the temperature during interval n, Delta y(n) are chill units accumulated during the 1-hour time interval n, and y(n) is the total accumulated chill units up to and including the chill measured during the interval n. At the start, y(0) = 0.","category":"page"},{"location":"chill_CumulativeChillUnit.html#Software-Name-Mappings","page":"Cumulative Chill Unit (Utah)","title":"Software Name Mappings","text":"","category":"section"},{"location":"chill_CumulativeChillUnit.html","page":"Cumulative Chill Unit (Utah)","title":"Cumulative Chill Unit (Utah)","text":"Because of naming restrictions imposed by the Julia language and Julia coding style, I cannot use the parameter, variable and function names from this summary for the parameter, variable and function names in the program. So, I have mapped names in the summary to names in the program while attempting to keep them consistent.","category":"page"},{"location":"chill_CumulativeChillUnit.html#Parameter-Name-Mappings","page":"Cumulative Chill Unit (Utah)","title":"Parameter Name Mappings","text":"","category":"section"},{"location":"chill_CumulativeChillUnit.html#Variable-Name-Mappings","page":"Cumulative Chill Unit (Utah)","title":"Variable Name Mappings","text":"","category":"section"},{"location":"chill_CumulativeChillUnit.html","page":"Cumulative Chill Unit (Utah)","title":"Cumulative Chill Unit (Utah)","text":"Theta_n Rightarrow theta_n","category":"page"},{"location":"chill_CumulativeChillUnit.html#Equation-Name-Mappings","page":"Cumulative Chill Unit (Utah)","title":"Equation Name Mappings","text":"","category":"section"},{"location":"chill_CumulativeChillUnit.html","page":"Cumulative Chill Unit (Utah)","title":"Cumulative Chill Unit (Utah)","text":"Delta y(n) Rightarrow delta_y_n\ny(n) Rightarrow y_n\ny(n - 1) Rightarrow y_nMinus1","category":"page"},{"location":"chill_CumulativeChillUnit.html","page":"Cumulative Chill Unit (Utah)","title":"Cumulative Chill Unit (Utah)","text":"","category":"page"},{"location":"chill_CumulativeChillUnit.html","page":"Cumulative Chill Unit (Utah)","title":"Cumulative Chill Unit (Utah)","text":"Last Reviewed on 06 February 2021","category":"page"},{"location":"api_types.html#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"api_types.html","page":"Types","title":"Types","text":"CurrentModule = BiTWeather","category":"page"},{"location":"api_types.html","page":"Types","title":"Types","text":"Configuration\nFieldMapping","category":"page"},{"location":"api_types.html#BiTWeather.Configuration","page":"Types","title":"BiTWeather.Configuration","text":"Configuration\n\nConstructors\n\nConfiguration(dsn::String, table::String, fieldMappings::Dict{Symbol, FieldMapping})\nConfiguration(; dsn::String, table::String, fieldMappings::Dict{Symbol, FieldMapping})\n\nArguments\n\ndsn: A Data Source Name (DSN) that can connect to the SQL database   and access table.\ntable: The SQL database table containing the weather data.\nfieldMappings: A dictionary of BiTWeather.FieldMapping entries, each   of which provides a mapping from a field understood by the BiTWeather.jl module   methods to a field in the SQL database table. The BiTWeather.jl module fields are   :dateTime, :temperature, :windSpeed, :windDirection, :pressure,   :relativeHumidity, and solarRadiation. The mapping for :dateTime is   required.\n\nExamples\n\nExample: Configuring ODBC on MacOS for Connecting to MariaDB\n\nDownload and install the MariaDB ODBC connector.\nConfigure the ODBC module with a DSN on MacOS by running the following in REPL\n\n    import Pkg\n    Pkg.add(\"ODBC\")\n    import ODBC\n\n    ODBC.adddriver(\"MariaDB\", \"/Library/MariaDB/MariaDB-Connector-ODBC/libmaodbc.dylib\")\n    ODBC.adddsn(\"meteobridge\", \"MariaDB\",\n                SERVER=\"mariadb.backinthirty.net\", DATABASE=\"meteobridge\",\n                UID=\"<username>\", PWD=\"<password>\")\n\nExample: Using BiTWeather.Configuration\n\n    import BiTWeather\n\n    configuration = BiTWeather.Configuration(\n        dsn = \"meteobridge\",\n        table = \"backinthirty\",\n        fieldMappings = Dict(\n            :dateTime => BiTWeather.FieldMapping(\n                name = \"DateTime\"\n            ),\n            :temperature => BiTWeather.FieldMapping(\n                name = \"TempOutNow\",\n                units = \"F\"\n            ),\n            :windSpeed => BiTWeather.FieldMapping(\n                name = \"WindSpeedNow\",\n                units = \"mph\"\n            ),\n            :windDirection => BiTWeather.FieldMapping(\n                name = \"WindDirNow\",\n                units = \"degrees\"\n            ),\n            :pressure => BiTWeather.FieldMapping(\n                name = \"PressNow\",\n                units = \"inHg\"\n            ),\n            :relativeHumidity => BiTWeather.FieldMapping(\n                name = \"HumOutNow\",\n                units = \"percent\"\n            ),\n            :solarRadiation => BiTWeather.FieldMapping(\n                name = \"SolRadNow\",\n                units = \"W/m2\"\n            )\n        )\n    )\n\n\n\n\n\n","category":"type"},{"location":"api_types.html#BiTWeather.FieldMapping","page":"Types","title":"BiTWeather.FieldMapping","text":"FieldMapping\n\nConstructors\n\nFieldMapping(name::String, units::Union{String, Nothing})\nFieldMapping(; name::String, units::Union{String, Nothing} = nothing)\n\nArguments\n\nname: The name of field in the SQL database table.\nunits: The units of the field values in the SQL database table.\n\nProvides the information needed to map a field understood by the BiTWeather.jl module functions to a field in the SQL database table.\n\n\n\n\n\n","category":"type"},{"location":"api_types.html","page":"Types","title":"Types","text":"","category":"page"},{"location":"api_types.html","page":"Types","title":"Types","text":"Last Reviewed on 06 February 2021","category":"page"},{"location":"chill_CumulativeChillHour.html#Cumulative-Chill-Hour","page":"Cumulative Chill Hour","title":"Cumulative Chill Hour","text":"","category":"section"},{"location":"chill_CumulativeChillHour.html#Model-Overview","page":"Cumulative Chill Hour","title":"Model Overview","text":"","category":"section"},{"location":"chill_CumulativeChillHour.html","page":"Cumulative Chill Hour","title":"Cumulative Chill Hour","text":"The Cumulative Chill Hour model is one of the most simplistic chill estimation methods. It counts the number of hours the temperature is between 32 degree F and 45 degree F.","category":"page"},{"location":"chill_CumulativeChillHour.html","page":"Cumulative Chill Hour","title":"Cumulative Chill Hour","text":"This simplistic chill estimation methods has proven sufficient for cold climates. However, it can underestimate the chill significantly in temperate climates. Therefore, for estimating chill for temperate climates it is better to use chill estimation methods better suited for temperate climate. Such methods include the Cumulative Chill Portion and the Mean Temperature models.","category":"page"},{"location":"chill_CumulativeChillHour.html#Model-Implementation","page":"Cumulative Chill Hour","title":"Model Implementation","text":"","category":"section"},{"location":"chill_CumulativeChillHour.html","page":"Cumulative Chill Hour","title":"Cumulative Chill Hour","text":"\nDelta y(n) =\nbegincases\n    00\n       space textfor  space Theta_n  320 degree F \n    10\n       space textfor  space 320 degree F leq Theta_n leq 450 degree F \n    00\n       space textfor  space Theta_n  450 degree F\nendcases\n","category":"page"},{"location":"chill_CumulativeChillHour.html","page":"Cumulative Chill Hour","title":"Cumulative Chill Hour","text":"and","category":"page"},{"location":"chill_CumulativeChillHour.html","page":"Cumulative Chill Hour","title":"Cumulative Chill Hour","text":"\ny(n) = y(n - 1) + Delta y(n)\n","category":"page"},{"location":"chill_CumulativeChillHour.html","page":"Cumulative Chill Hour","title":"Cumulative Chill Hour","text":"where Delta x(n) is chill units accumulated during the 1-hour time interval n, y(n) is the total accumulated chill units up to and including the chill measured during the interval n, and Theta_n is the temperature during interval n. At the start, y(0) = 0.","category":"page"},{"location":"chill_CumulativeChillHour.html#Software-Name-Mappings","page":"Cumulative Chill Hour","title":"Software Name Mappings","text":"","category":"section"},{"location":"chill_CumulativeChillHour.html","page":"Cumulative Chill Hour","title":"Cumulative Chill Hour","text":"Because of naming restrictions imposed by the Julia language and Julia coding style, I cannot use the parameter, variable and function names from this summary for the parameter, variable and function names in the program. So, I have mapped names in the summary to names in the program while attempting to keep them consistent.","category":"page"},{"location":"chill_CumulativeChillHour.html#Parameter-Name-Mappings","page":"Cumulative Chill Hour","title":"Parameter Name Mappings","text":"","category":"section"},{"location":"chill_CumulativeChillHour.html#Variable-Name-Mappings","page":"Cumulative Chill Hour","title":"Variable Name Mappings","text":"","category":"section"},{"location":"chill_CumulativeChillHour.html","page":"Cumulative Chill Hour","title":"Cumulative Chill Hour","text":"Theta_n Rightarrow theta_n","category":"page"},{"location":"chill_CumulativeChillHour.html#Equation-Name-Mappings","page":"Cumulative Chill Hour","title":"Equation Name Mappings","text":"","category":"section"},{"location":"chill_CumulativeChillHour.html","page":"Cumulative Chill Hour","title":"Cumulative Chill Hour","text":"Delta y(n) Rightarrow delta_y_n\ny(n) Rightarrow y_n\ny(n - 1) Rightarrow y_nMinus1","category":"page"},{"location":"chill_CumulativeChillHour.html","page":"Cumulative Chill Hour","title":"Cumulative Chill Hour","text":"","category":"page"},{"location":"chill_CumulativeChillHour.html","page":"Cumulative Chill Hour","title":"Cumulative Chill Hour","text":"Last Reviewed on 06 February 2021","category":"page"}]
}
